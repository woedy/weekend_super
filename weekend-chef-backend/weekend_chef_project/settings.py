"""
Django settings for weekend_chef_project project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
import logging
import os
from pathlib import Path
from django.core.management.utils import get_random_secret_key


def env(key: str, default: str | None = None) -> str | None:
    """Fetch a string environment variable with an optional default."""
    return os.environ.get(key, default)


def env_bool(key: str, default: bool = False) -> bool:
    """Return a boolean environment variable, interpreting common truthy strings."""
    value = os.environ.get(key)
    if value is None:
        return default
    return value.strip().lower() in {"1", "true", "yes", "on"}


def env_list(key: str, default: str = "") -> list[str]:
    """Return a list from a comma separated environment variable."""
    raw = os.environ.get(key, default)
    return [item.strip() for item in raw.split(",") if item.strip()]

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY") or get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool("DJANGO_DEBUG", False)

ALLOWED_HOSTS = env_list("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1")

EMAIL_BACKEND = env(
    "DJANGO_EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = env("DJANGO_EMAIL_HOST", "smtp.gmail.com")
EMAIL_HOST_USER = env("DJANGO_EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = env("DJANGO_EMAIL_HOST_PASSWORD", "")
EMAIL_PORT = int(env("DJANGO_EMAIL_PORT", "465"))
EMAIL_USE_TLS = env_bool("DJANGO_EMAIL_USE_TLS", False)
EMAIL_USE_SSL = env_bool("DJANGO_EMAIL_USE_SSL", True)
DEFAULT_FROM_EMAIL = env(
    "DJANGO_DEFAULT_FROM_EMAIL", "Weekend Chef <no-reply@weekendchef.local>"
)
BASE_URL = env("DJANGO_BASE_URL", "http://localhost:8000")

# Application definition

INSTALLED_APPS = [
     "daphne",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'channels',

    'corsheaders',

    'rest_framework',
    'rest_framework.authtoken',

    'accounts',
    'activities',
    'bank_account',
    'chef',
    'clients',
    'week_admin',
    'food',
    'orders',
    'chats',
    'dispatch',
    'homepage',
    'notifications',
    'complaints',

]

AUTH_USER_MODEL = 'accounts.User'

QA_SMOKE_ENABLED = env_bool("QA_SMOKE_ENABLED", DEBUG)


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",

]

ROOT_URLCONF = 'weekend_chef_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'weekend_chef_project.wsgi.application'
ASGI_APPLICATION = "weekend_chef_project.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

default_db_engine = env(
    "DJANGO_DB_ENGINE",
    "django.db.backends.sqlite3",
)

if default_db_engine == "django.db.backends.sqlite3":
    DATABASES = {
        "default": {
            "ENGINE": default_db_engine,
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": default_db_engine,
            "NAME": env("DJANGO_DB_NAME", "weekend_chef"),
            "USER": env("DJANGO_DB_USER", "weekend_chef"),
            "PASSWORD": env("DJANGO_DB_PASSWORD", ""),
            "HOST": env("DJANGO_DB_HOST", "localhost"),
            "PORT": int(env("DJANGO_DB_PORT", "5432")),
        }
    }



CELERY_BROKER_URL = env("CELERY_BROKER_URL", "redis://redis:6379")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", "redis://redis:6379")

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static_cdn", "static_root")  # For static files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # Separate media files

HOST_SCHEME = env("DJANGO_HOST_SCHEME", "http://")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SENTRY_DSN = env("SENTRY_DSN", "") or ""
SENTRY_ENVIRONMENT = env("SENTRY_ENVIRONMENT", "development")
SENTRY_TRACES_SAMPLE_RATE = float(env("SENTRY_TRACES_SAMPLE_RATE", "0.05"))

if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration

    sentry_logging = LoggingIntegration(level=logging.INFO, event_level=logging.ERROR)

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        environment=SENTRY_ENVIRONMENT,
        integrations=[
            DjangoIntegration(transaction_style="url"),
            CeleryIntegration(),
            sentry_logging,
        ],
        traces_sample_rate=SENTRY_TRACES_SAMPLE_RATE,
        send_default_pii=True,
    )


FCM_SERVER_KEY = env("FCM_SERVER_KEY", "")


from celery import Celery
app = Celery('weekend_chef_project')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
        },
    },
}



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Add other authentication classes as needed
    ),
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}






CORS_ALLOW_ALL_ORIGINS = env_bool("DJANGO_CORS_ALLOW_ALL_ORIGINS", False)
CORS_ALLOWED_ORIGINS = env_list("DJANGO_CORS_ALLOWED_ORIGINS")

CORS_ALLOW_CREDENTIALS = env_bool("DJANGO_CORS_ALLOW_CREDENTIALS", True)
CSRF_TRUSTED_ORIGINS = env_list("DJANGO_CSRF_TRUSTED_ORIGINS")



PUSHER_APP_ID = env("PUSHER_APP_ID", "")
PUSHER_KEY = env("PUSHER_KEY", "")
PUSHER_SECRET = env("PUSHER_SECRET", "")
PUSHER_CLUSTER = env("PUSHER_CLUSTER", "")
PUSHER_SSL = env_bool("PUSHER_SSL", True)


PAYSTACK_SECRET_KEY = env("PAYSTACK_SECRET_KEY", "")
MNOTIFY_KEY = env("MNOTIFY_KEY", "")
MNOTIFY_SENDER_ID = env("MNOTIFY_SENDER_ID", "")


GOOGLE_API_KEY = env("GOOGLE_API_KEY", "")


# MinIO Configuration
MINIO_ENDPOINT = env("MINIO_ENDPOINT", "")  # e.g., 'play.min.io'
MINIO_ACCESS_KEY = env("MINIO_ACCESS_KEY", "")
MINIO_SECRET_KEY = env("MINIO_SECRET_KEY", "")
MINIO_BUCKET_NAME = env("MINIO_BUCKET_NAME", "")
MINIO_USE_SSL = env_bool("MINIO_USE_SSL", False)  # Set to True if your MinIO is set up with SSL (HTTPS)


SECURE_SSL_REDIRECT = env_bool("DJANGO_SECURE_SSL_REDIRECT", False)
SESSION_COOKIE_SECURE = env_bool("DJANGO_SESSION_COOKIE_SECURE", False)
CSRF_COOKIE_SECURE = env_bool("DJANGO_CSRF_COOKIE_SECURE", False)
SECURE_HSTS_SECONDS = int(env("DJANGO_SECURE_HSTS_SECONDS", "0"))
SECURE_HSTS_INCLUDE_SUBDOMAINS = env_bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", False)
SECURE_HSTS_PRELOAD = env_bool("DJANGO_SECURE_HSTS_PRELOAD", False)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")